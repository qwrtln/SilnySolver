#!/bin/bash

remote="$1"
url="$2"

# Some variables to enhance output readability
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
NC='\033[0m' # No Color
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# Boolean semaphores for decision making
CAN_DELIVER=false
RUN_CHECK=false
MEMORY_CHECK=true

# Old build.log will only disturb with current check. It should be removed. 
    rm -rf *.log

# Put current build files in separate folder - move them back later
    mkdir -p .temp .temp/Dev .temp/Test
    mv Dev/build/*.o Dev/build/*.d SilnySolver .temp/Dev/ 2>/dev/null
    mv Test/build/*.o Test/build/*.d SilneTesty .temp/Test/ 2>/dev/null

# Let's gather some build logs
# This rule builds short tests only for memory leaks finding
    make memcheck 2> build.log  

    if [ -s build.log ]
    then

        # Check for errors
        grep -i error build.log > .buildErr.log

            if [ -s .buildErr.log ]
            then
                echo -e "\n" 
                grep --color -i error build.log
                rm -rf .buildErr.log # remove in case of aborting
                echo -e "\nDelivery check finished with ${RED}compilation errors${NC} listed above. See ${BOLD}build.log${NORMAL} file for details. Please ${BOLD}correct them${NORMAL} before you continue."
                exit 1
                else 
                    # Check for warnings only if there are no errors
                    grep -i warning build.log > .buildWar.log
                    if [ -s .buildWar.log ]
                    then 
                        echo -e "\n" 
                        grep --color -i warning build.log
                        rm -rf .buildWar.log # remove in case of aborting
                        echo -e "\nDelivery check finished with ${YELLOW}WARNINGS${NC} listed above. See build.log file for details."
                        exit 1 
                    fi
            fi
    else
        rm -rf build.log .buildErr.log 2>/dev/null # in this case those files are no longer needed
        echo -e "\nThe code is ${CYAN}pristine${NC}!"
        CAN_DELIVER=true
    fi

    if [ "$MEMORY_CHECK" = true ]
    then
        # The following is an array for "busy spinner"
        spin[0]="-"
        spin[1]="\\"
        spin[2]="|"
        spin[3]="/"

        echo -n "Checking for memory leaks ${spin[0]}"
        valgrind ./SilneTesty CrazyCube --leak-check=full &> .memLeaks &
        pidValgrind=$!
        # Valgrind takes a long time to run, so we want to see if it hasn't hung up
        while kill -0 $pidValgrind 2>/dev/null
        do
            for i in "${spin[@]}"
            do
                echo -ne "\b$i"
                sleep 0.1
            done
        done
        echo -e "\n"

        # Parse only through relevant part of the output
        grep "HEAP SUMMARY" .memLeaks -A2 | cut -c 10- | tee .4perl
        grep "LEAK SUMMARY" .memLeaks -A5 | cut -c 10- | tee -a .4perl
        grep "ERROR SUMMARY" .memLeaks | cut -c 10- | tee -a .4perl
        rm .memLeaks

        # Using external script to parse Valgrind output
        MEM_CHECK_PASSED=false 
        DEF_LOST_BYTES=0
        ERRORS=0
        read DEF_LOST_BYTES ERRORS MEM_CHECK_PASSED < <(perl .valgrindParser.pl)
        rm .4perl
        if [ "$MEM_CHECK_PASSED" = true ]
        then
            echo -e "\n${GREEN}Everything fine.${NORMAL}\n"
        else
            CAN_DELIVER=false
            echo -e "\nYour change introduced ${RED}$DEF_LOST_BYTES${NORMAL} bytes of memory leaks (with ${RED}$ERRORS${NORMAL} errors)! Please correct them before you deliver."
            exit 1
        fi

    fi

    # Clean up after delivery check build
        make clean > /dev/null
    # Put previous build files back where they belong 
        mv .temp/Dev/* Dev/build/ 2>/dev/null
        mv .temp/Test/* Test/build/ 2>/dev/null
        rm -rf .temp 2>/dev/null

if [ "$CAN_DELIVER" = true ]
then
    exit 0
else
    exit 1 # A non-zero exit aborts push
fi
